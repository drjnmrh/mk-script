plugins {
    alias(libs.plugins.android.application)
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def pngDir = project.hasProperty("png_dir") ? project.png_dir : properties.getProperty('png.dir')
def glmDir = project.hasProperty("glm_dir") ? project.glm_dir : properties.getProperty('glm.dir')
def verboseFlag = project.hasProperty("verbose") ? project.verbose : 0

android {
    namespace 'com.stoned_fox.smile'
    compileSdk 34

    defaultConfig {
        applicationId "com.stoned_fox.smile"
        minSdk 28
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments "-DVERBOSE=${verboseFlag}", "-DPNG_DIR=${pngDir}", "-DGLM_DIR=${glmDir}"
            }    
        }

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=Release'
                }
            }
        }
        debug {
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=Debug'
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('../../CMakeLists.txt')
            version '3.22.1'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

task cleanAssets(type: Delete) {
    println "Delete assets..."
    delete 'src/main/assets'
}

task copyAssets {
    println "Copy assets..."
    delete "src/main/assets"
    doLast {
        if (!file("src/main/assets").exists()) {
            copy {
                println "do copy..."
                from '../../../assets'
                into 'src/main/assets'
            }
        }
    }
}

preBuild.dependsOn(copyAssets)
clean.dependsOn(cleanAssets)

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
}
