#!/bin/bash

# Stoned Fox's MK Script plugin which prepares local.properties and autodownloads
# dependencies (if prepare script can be used) according mk.properties config found
# in a project root.

mk::help() {
  echo "Stoned Fox's MK Script plugin which prepares local.properties and autodownloads"
  echo "dependencies (if prepare script can be used) according mk.properties config found"
  echo "in a project root."
  echo ""
  echo "Usage:"
  echo ""
  echo "  ./prepare /path/to/project/root [options]"
  echo ""
  echo "Options:"
  echo "  -h, --help                        = show this help"
  echo "  -v, --verbose                     = enable verbose mode (default is off)"
  echo "  --platform <target-platform>      = specify target platform (e.g. msvc, macosx, linux)"
  echo ""
  echo "Examples:"
  echo ""
  echo "  ./prepare ~/src/my-project --verbose"
  echo ""

  exit 0
}

MYDIR="$(cd "$(dirname "$0")" && pwd)"

source $MYDIR/commons.sh

ROOT=${PWD}
VERBOSE=0
PLATFORM="auto"
LEFTOVER_ARGS=()

mk::parse_args() {
  ROOT=$(mk::normalize_path $1)
  shift 1

  while [[ "$#" > 0 ]]; do case $1 in
    -h|--help) mk::help;;
    -v|--verbose) VERBOSE=1; LEFTOVER_ARGS+=("--verbose");;
    --platform) PLATFORM=$2; LEFTOVER_ARGS+=("--platform"); LEFTOVER_ARGS+=("$2"); shift;;
    *) LEFTOVER_ARGS+=("$1");;
  esac; shift; done

  mk::debug "VERBOSE mode is ON\n"
  mk::debug "ROOT path is '$ROOT'\n"
  mk::debug "PLATFORM is '$PLATFORM'\n"
  mk::debug "LEFTOVER args are '${LEFTOVER_ARGS[*]}'\n"
}

mk::main() {
  mk::info "= Executing $(mk::title 'MK Project Prepare') Plugin... =\n"

  mk::parse_args $@

  local _project_root=$ROOT

  mk::info "Reading $(mk::bright existing) properties...\n"
  local _existing_props=()
  if [[ -e "$_project_root/local.properties" ]]; then
    mk::read_local_properties $_project_root/local.properties
    _existing_props+=(${PROPS_LIST[@]})
  fi
  local _thirdparty_dir=""
  for _existing in ${_existing_props[@]}; do
    if [[ "$_existing" == "thirdparty.dir" || "$_existing" == "3rdparty.dir" ]]; then
      _thirdparty_dir="${PROPS_TABLE[${_existing}]}"

      if [[ ${_thirdparty_dir:0:1} == "~" ]]; then
        _thirdparty_dir="${_thirdparty_dir/#\~/$HOME}"
      fi

      if [[ -e "$_thirdparty_dir" ]]; then
        mk::debug "Normalizing path $_thirdparty_dir "
        _thirdparty_dir=$(readlink -f $_thirdparty_dir)
        mk::debug "to $_thirdparty_dir\n"
      fi

      mk::step "Found 3rdparty folder in $_thirdparty_dir\n"

      break
    fi
  done
  mk::done "DONE ($(mk::plane existing-properties))\n"

  mk::info "Reading $(mk::bright properties config) file...\n"
  mk::read_local_properties $_project_root/mk.properties
  mk::done "DONE ($(mk::plane properties-config))\n"

  mk::info "Setting $(mk::bright values) for each property:\n"
  mk::debug "Properties list:\n${PROPS_LIST[*]}\n"
  for _prop_name in ${PROPS_LIST[@]}; do
    local _already_set=0
    for _existing in ${_existing_props[@]}; do
      if [[ "$_existing" == "$_prop_name" ]]; then
        _already_set=1
        break
      fi
    done

    if [[ $_already_set -eq 1 ]]; then
      mk::step "Property $(mk::bright $_prop_name) is already set - skipping.\n"
      continue
    fi

    if [[ ! "$_prop_name" == "dependencies.list" ]]; then
      read -r -p "Set $_prop_name (${PROPS_TABLE[$_prop_name]}): " _prop_value

      if [[ ${_prop_value:0:1} == "~" ]]; then
        _prop_value="${_prop_value/#\~/$HOME}"
      fi

      if [[ -e "$_prop_value" ]]; then
        mk::debug "Normalizing path $_prop_value "
        _prop_value=$(readlink -f $_prop_value)
        mk::debug "to $_prop_value\n"
      fi

      if [[ "$_prop_name" == "thirdparty.dir" || "$_prop_name" == "3rdparty.dir" ]]; then
        _thirdparty_dir="$_prop_value"
      fi

      echo "" >> $_project_root/local.properties
      echo "# ${PROPS_TABLE[$_prop_name]}" >> $_project_root/local.properties
      echo "$_prop_name=\"$_prop_value\"" >> $_project_root/local.properties

      PROPS_TABLE[$_prop_name]="$_prop_value"
    fi
  done

  if [[ "$VERBOSE" -eq 1 ]]; then
    local _table_key=$(mk::center_half "NAME" ' ')
    local _table_val=$(mk::center_half "VALUE" ' ')
    mk::debug "$_table_key|$_table_val\n"
    mk::debug "$(mk::center_half "" '-')+$(mk::center_half "" '-')\n"
    for _prop_name in ${PROPS_LIST[@]}; do
      if [[ "$_prop_name" == "dependencies.list" ]]; then
        continue
      fi

      _table_key=$(mk::center_half "$_prop_name" ' ')
      _table_val=$(mk::center_half "${PROPS_TABLE[$_prop_name]}" ' ')
      mk::debug "$_table_key|$_table_val\n"
    done
  fi
  mk::done "DONE ($(mk::plane values-setup))\n"

  if [[ "${#DEPENDENCIES_LIST[@]}" != 0 ]]; then
    mk::info "Preparing $(mk::bright dependencies):\n"

    local _scripts_url=https://raw.githubusercontent.com/drjnmrh/mk-script/main/plugins/prepare-scripts
    local _downloaded_path="$MYDIR/.cache"
    local _need_cleanup_cache=0

    if [[ ! -d "$_downloaded_path" ]]; then
      mk::debug "Creating folder for temporary downloads '$_downloaded_path'\n"
      mkdir -p "$_downloaded_path"
      if [[ $? -ne 0 ]]; then
        mk::warn "Failed to collect dependencies!\n"
        mk::exit 0
      fi
      _need_cleanup_cache=1
    fi

    mk::debug "Walking dependencies:\n"
    for _dependency in ${DEPENDENCIES_LIST[@]}; do
      mk::debug "Trying to download prepare script for '$_dependency'\n"
      pushd $_downloaded_path
      curl -OL --fail $_scripts_url/prepare-$_dependency.sh
      if [[ ! -e "prepare-$_dependency.sh" ]]; then
        mk::warn "No prepare script for dependency '$_dependency' was found - manual install.\n"
        popd
        continue
      fi
      chmod +x prepare-$_dependency.sh
      popd

      mk::debug "Getting path to install dependency to\n"
      local _prefix_dir="$_thirdparty_dir"
      if [[ ! -d "$_prefix_dir" ]]; then
        read -r -p "Please, specify the folder to install '$_dependency' to: " _prefix_dir
      fi

      mk::info "Autoinstalling '$(mk::bright $_dependency)' into $(mk::plane $_prefix_dir)...\n"
      PATH=$_downloaded_path:$PATH prepare-$_dependency.sh --prefix $_prefix_dir
      if [[ $? -ne 0 ]]; then
        mk::warn "FAILED, requires manual install!\n"
      else
        mk::done "DONE($_dependency)\n"
      fi
    done

    if [[ $_need_cleanup_cache -eq 1 ]]; then
      mk::debug "Cleanup temporary downloads folder '$_downloaded_path'\n"
      rm -rf "$_downloaded_path"
    fi
    mk::done "DONE ($(mk::plane autoinstall))\n"
  fi

  mk::done "DONE.\n"

  mk::exit 0
}

mk::main $@

